/*
 * Copyright (C) 2018 Square, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *    https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package com.squareup.moshi.kotlin.codegen.api

import com.squareup.kotlinpoet.ClassName
import com.squareup.kotlinpoet.CodeBlock
import com.squareup.kotlinpoet.FileSpec
import com.squareup.kotlinpoet.FunSpec
import com.squareup.kotlinpoet.KModifier
import com.squareup.kotlinpoet.ParameterizedTypeName.Companion.parameterizedBy
import com.squareup.kotlinpoet.PropertySpec
import com.squareup.kotlinpoet.STAR
import com.squareup.kotlinpoet.TypeSpec
import com.squareup.kotlinpoet.WildcardTypeName
import com.squareup.kotlinpoet.asClassName

private const val DEFAULT_ADAPTER_REGISTRY_PACKAGE_NAME_PREFIX = "com.squareup.moshi.generated"
private const val DEFAULT_ADAPTER_REGISTRY_CLASS_NAME = "DefaultMoshiAdapterRegistry"

public data class AdapterRegistration(
  val targetClassName: ClassName,
  val adapterClassName: ClassName,
  val hasTypeParameters: Boolean
)

/** Generates a registry of adapters. */
@InternalMoshiCodegenApi
public class AdapterRegistryGenerator(
  private val adapterRegistrations: List<AdapterRegistration>
) {

  public fun generate(): FileSpec {
    // Get the top-level package name of the project (inferred from the shortest package name)
    val packageName = run {
      val firstPackage = adapterRegistrations
        .filter { it.targetClassName.packageName.isNotEmpty() }
        .minByOrNull { it.targetClassName.packageName.length }
        ?.targetClassName?.packageName

      firstPackage
    } ?: "default" // fallback package name

    // Generate a package hash of the package name to avoid potential collisions.
    val packageHash = packageName.hashCode().toUInt().toString(16).take(12)
    val registryPackageName = "$DEFAULT_ADAPTER_REGISTRY_PACKAGE_NAME_PREFIX.r$packageHash"

    val moshiClass = ClassName("com.squareup.moshi", "Moshi")
    val adapterRegistryClass = moshiClass.nestedClass("AdapterRegistry")
    val jsonAdapterClass = ClassName("com.squareup.moshi", "JsonAdapter")
    val typeClass = ClassName("java.lang.reflect", "Type")

    val adaptersMapBuilder = CodeBlock.builder()
    adaptersMapBuilder.add("mapOf(")

    val nonGenericAdapters = adapterRegistrations.filter { !it.hasTypeParameters }
    nonGenericAdapters.forEachIndexed { index, registration ->
      if (index > 0) adaptersMapBuilder.add(",")
      adaptersMapBuilder.add(
        "\n  %T::class.java to %T::class.java",
        registration.targetClassName,
        registration.adapterClassName
      )
    }

    if (nonGenericAdapters.isNotEmpty()) {
      adaptersMapBuilder.add("\n")
    }
    adaptersMapBuilder.add(")")

    val adaptersProperty = PropertySpec.builder(
      "adapters",
      Map::class.asClassName().parameterizedBy(
        typeClass,
        Class::class.asClassName().parameterizedBy(
          WildcardTypeName.producerOf(jsonAdapterClass.parameterizedBy(STAR))
        )
      )
    )
      .addModifiers(KModifier.OVERRIDE)
      .getter(
        FunSpec.getterBuilder()
          .addCode("return %L", adaptersMapBuilder.build())
          .build()
      )
      .build()

    val registryClass = TypeSpec.classBuilder(DEFAULT_ADAPTER_REGISTRY_CLASS_NAME)
      .addSuperinterface(adapterRegistryClass)
      .addProperty(adaptersProperty)
      .build()

    val file = FileSpec.builder(registryPackageName, DEFAULT_ADAPTER_REGISTRY_CLASS_NAME)
      .addFileComment(
        """
            This file is auto generated by Moshi Kotlin CodeGen.
            **DO NOT EDIT THIS FILE MANUALLY**
          """.trimIndent()
      )
      .addType(registryClass)
      .build()

    return file
  }
}
